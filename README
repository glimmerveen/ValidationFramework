The Validation Framework is a set of base classes, interfaces and utilities to
help in implementing full-featured input validation: from the validation triggers
to the resulting feedback and assistance to the user.

This library is still in its early stage of development. The following features
are expected:

INPUT VALIDATION
 . Instant validation (for example, on each key stroke);
 . Delayed validation (for example, when focus is lost or when the ENTER key is
   pressed, or when Apply button is pressed);
 . Validation on individual components;
 . Validation on groups of components without inter-dependencies;
 . Validation on groups of components with inter-dependencies;
 . Validation of groups within groups;
 . Syntax validation and semantic validation;
 . Support for table edition.

FEEDBACK
 . Immediate feedback;
 . Delayed feedback;
 . Value proposal in case of error (either automatic proposal for related
   components within a group), that is to say automatic correction of related
   components;
 . Conditional logic for components (for example, enabling/disabling of an Apply
   button in case of valid/invalid input);
 . Decorations for user assistance (icons, convenient tooltips, hints, etc.),
   staying close to the current look-and-feel.

EASY AND EXTENDABLE FRAMEWORK
 . Very simple to use;
 . Most generic concepts as possible (validation trigger -> data reader ->
   validation algorithm -> validation rules -> validation results ->
   feedback to user -> component decorations);
 . Easily pluggable to custom components;
 . Not only for Swing components;
 . Not only GUI input validation (however, GUI validation is the focus of the
   framework);
 . Special components (any kind of components);
 . Flexibility of use (one validator for the whole application, or one validator
   per input component, or whatever);
 . Ease of use (for the programmer), possibly through a DSL;
 . Custom rules (of course);
 . Custom feedbacks;
 . Custom decorations;
 . Custom validation/feedback algorithms;
 . Set the validation to a certain state (for example, forcing invalidation and/or its
   feedback);
 . Anything useful you can imagine.

MISC
 . Support for runtime look-and-feel switches for default feedback
   implementations;
 . Easily pluggable to the Commons Validator framework from Jakarta.
